// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks_mailer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockworkerEnqueuer is an autogenerated mock type for the workerEnqueuer type
type MockworkerEnqueuer struct {
	mock.Mock
}

type MockworkerEnqueuer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockworkerEnqueuer) EXPECT() *MockworkerEnqueuer_Expecter {
	return &MockworkerEnqueuer_Expecter{mock: &_m.Mock}
}

// EnqueueTask provides a mock function with given fields: ctx, taskName, payload
func (_m *MockworkerEnqueuer) EnqueueTask(ctx context.Context, taskName string, payload interface{}) error {
	ret := _m.Called(ctx, taskName, payload)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, taskName, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockworkerEnqueuer_EnqueueTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueTask'
type MockworkerEnqueuer_EnqueueTask_Call struct {
	*mock.Call
}

// EnqueueTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskName string
//   - payload interface{}
func (_e *MockworkerEnqueuer_Expecter) EnqueueTask(ctx interface{}, taskName interface{}, payload interface{}) *MockworkerEnqueuer_EnqueueTask_Call {
	return &MockworkerEnqueuer_EnqueueTask_Call{Call: _e.mock.On("EnqueueTask", ctx, taskName, payload)}
}

func (_c *MockworkerEnqueuer_EnqueueTask_Call) Run(run func(ctx context.Context, taskName string, payload interface{})) *MockworkerEnqueuer_EnqueueTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockworkerEnqueuer_EnqueueTask_Call) Return(_a0 error) *MockworkerEnqueuer_EnqueueTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockworkerEnqueuer_EnqueueTask_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockworkerEnqueuer_EnqueueTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockworkerEnqueuer creates a new instance of MockworkerEnqueuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockworkerEnqueuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockworkerEnqueuer {
	mock := &MockworkerEnqueuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
