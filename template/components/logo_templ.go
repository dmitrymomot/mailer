// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/dmitrymomot/mailer/template/utils"
import "braces.dev/errtrace"

func Logo(fileURL string, link ...string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if len(link) > 0 {
			templ_7745c5c3_Err = LogoImage(fileURL, "logo", link[0], "200px").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return errtrace.Wrap(templ_7745c5c3_Err)
			}
		} else {
			templ_7745c5c3_Err = LogoImage(fileURL, "logo", "#", "200px").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return errtrace.Wrap(templ_7745c5c3_Err)
			}
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return errtrace.Wrap(templ_7745c5c3_Err)
	})
}

func LogoImage(fileURL, altText, link, width string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var3 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			templ_7745c5c3_Var4 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
				if !templ_7745c5c3_IsBuffer {
					templ_7745c5c3_Buffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
				}
				if len(link) > 0 {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<a href=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					var templ_7745c5c3_Var5 templ.SafeURL = templ.URL(link)
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var5)))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" target=\"_blank\" width=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(width))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" align=\"center\"><img src=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fileURL))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" alt=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(altText))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" width=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(width))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"></a>")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
				} else {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<img src=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fileURL))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" alt=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(altText))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" width=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(width))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
				}
				if !templ_7745c5c3_IsBuffer {
					_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
				}
				return errtrace.Wrap(templ_7745c5c3_Err)
			})
			templ_7745c5c3_Err = ColFull(utils.AlignCenter).Render(templ.WithChildren(ctx, templ_7745c5c3_Var4), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return errtrace.Wrap(templ_7745c5c3_Err)
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return errtrace.Wrap(templ_7745c5c3_Err)
		})
		templ_7745c5c3_Err = Row().Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return errtrace.Wrap(templ_7745c5c3_Err)
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return errtrace.Wrap(templ_7745c5c3_Err)
	})
}

func LogoText(text string, link ...string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var7 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			templ_7745c5c3_Var8 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
				if !templ_7745c5c3_IsBuffer {
					templ_7745c5c3_Buffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
				}
				if len(link) > 0 {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<a href=\"")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					var templ_7745c5c3_Var9 templ.SafeURL = templ.URL(link[0])
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var9)))
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" target=\"_blank\" align=\"center\" style=\"text-decoration: none;\">")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					templ_7745c5c3_Err = logoText(text).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</a>")
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
				} else {
					templ_7745c5c3_Err = logoText(text).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return errtrace.Wrap(templ_7745c5c3_Err)
					}
				}
				if !templ_7745c5c3_IsBuffer {
					_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
				}
				return errtrace.Wrap(templ_7745c5c3_Err)
			})
			templ_7745c5c3_Err = ColFull(utils.AlignCenter).Render(templ.WithChildren(ctx, templ_7745c5c3_Var8), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return errtrace.Wrap(templ_7745c5c3_Err)
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return errtrace.Wrap(templ_7745c5c3_Err)
		})
		templ_7745c5c3_Err = Row().Render(templ.WithChildren(ctx, templ_7745c5c3_Var7), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return errtrace.Wrap(templ_7745c5c3_Err)
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return errtrace.Wrap(templ_7745c5c3_Err)
	})
}

func logoText(text string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var10 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var10 == nil {
			templ_7745c5c3_Var10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h1 style=\"color:#6366f1;\">")
		if templ_7745c5c3_Err != nil {
			return errtrace.Wrap(templ_7745c5c3_Err)
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(text)
		if templ_7745c5c3_Err != nil {
			return errtrace.Wrap(templ.Error{Err: templ_7745c5c3_Err, FileName: `template/components/logo.templ`, Line: 41, Col: 34})
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return errtrace.Wrap(templ_7745c5c3_Err)
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h1>")
		if templ_7745c5c3_Err != nil {
			return errtrace.Wrap(templ_7745c5c3_Err)
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return errtrace.Wrap(templ_7745c5c3_Err)
	})
}
